name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
        include:
          - rust: stable
            can-fail: false
          - rust: beta
            can-fail: false
          - rust: nightly
            can-fail: true
    continue-on-error: ${{ matrix.can-fail }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-
          
    - name: Check code formatting
      if: matrix.rust == 'stable'
      run: cargo fmt --all -- --check
      
    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Run tests
      run: cargo test --all-features --verbose
      
    - name: Run doc tests
      run: cargo test --doc
      
    - name: Check documentation
      run: cargo doc --all-features --no-deps --document-private-items

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Install cargo-audit
      run: cargo install cargo-audit
    - name: Run security audit
      run: cargo audit

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run benchmarks
      run: |
        cargo bench --bench throughput -- --output-format json | tee benchmark-results.json
        
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: true

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
        
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
      
    - name: Generate coverage report
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: true

  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    needs: [test, security-audit]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact-name: nym-mixnode-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact-name: nym-mixnode-linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact-name: nym-mixnode-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact-name: nym-mixnode-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact-name: nym-mixnode-windows-x86_64.exe
            
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build release binary
      run: |
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        fi
        cargo build --release --target ${{ matrix.target }}
        
    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if [[ "${{ matrix.target }}" == *"linux"* ]]; then
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            aarch64-linux-gnu-strip target/${{ matrix.target }}/release/nym-mixnode
          else
            strip target/${{ matrix.target }}/release/nym-mixnode
          fi
        elif [[ "${{ matrix.target }}" == *"apple"* ]]; then
          strip target/${{ matrix.target }}/release/nym-mixnode
        fi
        
    - name: Create artifact directory
      run: mkdir -p artifacts
      
    - name: Copy binary to artifacts (Unix)
      if: matrix.os != 'windows-latest'
      run: cp target/${{ matrix.target }}/release/nym-mixnode artifacts/${{ matrix.artifact-name }}
      
    - name: Copy binary to artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: cp target/${{ matrix.target }}/release/nym-mixnode.exe artifacts/${{ matrix.artifact-name }}
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact-name }}
        path: artifacts/${{ matrix.artifact-name }}
        retention-days: 30

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-audit]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/nym-mixnode
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build development image
      if: github.ref == 'refs/heads/develop'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.dev
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/nym-mixnode:dev
          ghcr.io/${{ github.repository }}:dev
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Deploy to staging via Terraform
      run: |
        cd deployment/terraform/staging
        terraform init
        terraform plan -out=tfplan
        terraform apply tfplan
        
    - name: Run deployment tests
      run: |
        cd deployment/tests
        ./staging-tests.sh
        
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: "Staging deployment ${{ job.status }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: us-east-1
        
    - name: Deploy to production via Terraform
      run: |
        cd deployment/terraform/production
        terraform init
        terraform plan -out=tfplan
        terraform apply tfplan
        
    - name: Run smoke tests
      run: |
        cd deployment/tests
        ./production-smoke-tests.sh
        
    - name: Update monitoring dashboards
      run: |
        cd deployment/monitoring
        ./update-dashboards.sh production
        
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "🚀 Production deployment successful!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts
        
    - name: Create release archive
      run: |
        cd artifacts
        for dir in */; do
          tar -czf "${dir%/}.tar.gz" -C "$dir" .
        done
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*.tar.gz
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, security-audit, build, docker]
    if: always()
    
    steps:
    - name: Notify team on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ CI/CD Pipeline failed for ${{ github.ref }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify team on success
      if: success() && github.ref == 'refs/heads/main'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ CI/CD Pipeline completed successfully for main branch"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
